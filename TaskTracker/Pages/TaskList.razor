@page "/"
@using TaskTracker.Models
@using TaskTracker.Features.Tasks.Queries
@using TaskTracker.Features.Tasks.Commands
@using TaskTracker.Components
@using MudBlazor
@using MediatR
@inject IMediator Mediator
@inject IDialogService DialogService
@inject NavigationManager NavigationManager

<PageTitle>Task Tracker</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    <MudText Typo="Typo.h4" Class="mb-4">Task Backlog</MudText>

    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="OpenAddTaskDialog" Class="mb-4">
        Add New Task
    </MudButton>

    @if (_tasks == null)
    {
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
    }
    else
    {
        <MudTable Items="@_tasks" Dense="true" Hover="true" Bordered="true" Striped="true">
            <HeaderContent>
                <MudTh>Title</MudTh>
                <MudTh>Status</MudTh>
                <MudTh>Estimated Effort</MudTh>
                <MudTh>Time Spent</MudTh>
                <MudTh>Actions</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Title">@context.Title</MudTd>
                <MudTd DataLabel="Status">
                    <MudChip Color="@GetStatusColor(context.Status)" Size="Size.Small">
                        @context.Status
                    </MudChip>
                </MudTd>
                <MudTd DataLabel="Estimated Effort">@context.EstimatedEffort minutes</MudTd>
                <MudTd DataLabel="Time Spent">@FormatTimeSpan(context.TotalTimeSpent)</MudTd>
                <MudTd DataLabel="Actions">
                    <MudIconButton Icon="@Icons.Material.Filled.Edit" OnClick="@(() => OpenEditTaskDialog(context))" />
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="@(() => DeleteTask(context))" />
                    <MudIconButton Icon="@Icons.Material.Filled.Visibility" OnClick="@(() => NavigateToTaskDetail(context.Id))" />
                </MudTd>
            </RowTemplate>
        </MudTable>
    }
</MudContainer>

@code {
    private List<TaskItem>? _tasks;

    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        await LoadTasks();
    }

    private async System.Threading.Tasks.Task LoadTasks()
    {
        _tasks = await Mediator.Send(new GetAllTasksQuery());
    }

    private Color GetStatusColor(TaskState status)
    {
        return status switch
        {
            TaskState.Backlog => Color.Default,
            TaskState.InProgress => Color.Warning,
            TaskState.Done => Color.Success,
            _ => Color.Default
        };
    }

    private string FormatTimeSpan(TimeSpan timeSpan)
    {
        return $"{(int)timeSpan.TotalHours}h {timeSpan.Minutes}m";
    }

    private async System.Threading.Tasks.Task OpenAddTaskDialog()
    {
        var parameters = new DialogParameters();
        var dialog = DialogService.Show<AddTaskDialog>("Add New Task", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await LoadTasks();
        }
    }

    private async System.Threading.Tasks.Task OpenEditTaskDialog(TaskItem task)
    {
        var parameters = new DialogParameters
        {
            ["Task"] = task
        };
        var dialog = DialogService.Show<EditTaskDialog>("Edit Task", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await LoadTasks();
        }
    }

    private async System.Threading.Tasks.Task DeleteTask(TaskItem task)
    {
        var parameters = new DialogParameters
        {
            ["ContentText"] = $"Are you sure you want to delete task '{task.Title}'?",
            ["ButtonText"] = "Delete",
            ["Color"] = Color.Error
        };

        var dialog = DialogService.Show<ConfirmationDialog>("Delete Task", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await Mediator.Send(new DeleteTaskCommand { Id = task.Id });
            await LoadTasks();
        }
    }

    private void NavigateToTaskDetail(int taskId)
    {
        NavigationManager.NavigateTo($"/task/{taskId}");
    }
} 