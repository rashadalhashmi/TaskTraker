@page "/"
@using TaskTracker.Models
@using TaskTracker.Features.Tasks.Queries
@using TaskTracker.Features.Tasks.Commands
@using TaskTracker.Components
@using MudBlazor
@using MediatR
@using Microsoft.AspNetCore.SignalR.Client
@inject IMediator Mediator
@inject IDialogService DialogService
@inject NavigationManager NavigationManager
@inject ITimeTrackerService TimeTrackerService

<PageTitle>Task Tracker</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    <MudText Typo="Typo.h4" Class="mb-4">Task Backlog</MudText>

    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="OpenAddTaskDialog" Class="mb-4">
        Add New Task
    </MudButton>

    @if (_tasks == null)
    {
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
    }
    else
    {
        <MudTable Items="@_tasks" Dense="true" Hover="true" Bordered="true" Striped="true">
            <HeaderContent>
                <MudTh>Title</MudTh>
                <MudTh>Status</MudTh>
                <MudTh>Estimated Effort</MudTh>
                <MudTh>Time Spent</MudTh>
                <MudTh>Actions</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Title">@context.Title</MudTd>
                <MudTd DataLabel="Status">
                    <MudChip Color="@GetStatusColor(context.Status)" Size="Size.Small">
                        @context.Status
                    </MudChip>
                </MudTd>
                <MudTd DataLabel="Estimated Effort">@context.EstimatedEffort minutes</MudTd>
                <MudTd DataLabel="Time Spent">@FormatTimeSpan(GetCurrentTimeSpent(context))</MudTd>
                <MudTd DataLabel="Actions">
                    <MudIconButton Icon="@Icons.Material.Filled.Edit" OnClick="@(() => OpenEditTaskDialog(context))" />
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="@(() => DeleteTask(context))" />
                    <MudIconButton Icon="@Icons.Material.Filled.Visibility" OnClick="@(() => NavigateToTaskDetail(context.Id))" />
                    @if (context.Status == TaskState.InProgress)
                    {
                        <MudIconButton Icon="@Icons.Material.Filled.CheckCircle" Color="Color.Success" OnClick="@(() => MarkTaskAsDone(context))" />
                    }
                    @if (TimeTrackerService.IsTimerRunning(context.Id))
                    {
                        <MudIconButton Icon="@Icons.Material.Filled.Stop" Color="Color.Error" OnClick="@(() => StopTimer(context.Id))" />
                    }
                    else
                    {
                        <MudIconButton Icon="@Icons.Material.Filled.PlayArrow" Color="Color.Primary" OnClick="@(() => StartTimer(context.Id))" />
                    }
                </MudTd>
            </RowTemplate>
        </MudTable>
    }
</MudContainer>

@code {
    private List<TaskItem>? _tasks;
    private HubConnection? _hubConnection;
    private Dictionary<int, TimeSpan> _currentTimes = new();

    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        await LoadTasks();
        await InitializeSignalR();
    }

    private async System.Threading.Tasks.Task InitializeSignalR()
    {
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/timeTrackingHub"))
            .Build();

        _hubConnection.On<int, TimeSpan>("ReceiveTimeUpdate", async (taskId, timeSpent) =>
        {
            await InvokeAsync(() =>
            {
                _currentTimes[taskId] = timeSpent;
                StateHasChanged();
            });
        });

        await _hubConnection.StartAsync();
    }

    private TimeSpan GetCurrentTimeSpent(TaskItem task)
    {
        if (_currentTimes.TryGetValue(task.Id, out var time))
        {
            return time;
        }
        return task.TotalTimeSpent;
    }

    private async System.Threading.Tasks.Task StartTimer(int taskId)
    {
        await TimeTrackerService.StartTimerAsync(taskId);
        StateHasChanged();
    }

    private async System.Threading.Tasks.Task StopTimer(int taskId)
    {
        await TimeTrackerService.StopTimerAsync(taskId);
        StateHasChanged();
    }

    private async System.Threading.Tasks.Task LoadTasks()
    {
        _tasks = await Mediator.Send(new GetAllTasksQuery());
        _currentTimes = _tasks.ToDictionary(t => t.Id, t => t.TotalTimeSpent);
    }

    private Color GetStatusColor(TaskState status)
    {
        return status switch
        {
            TaskState.Backlog => Color.Default,
            TaskState.InProgress => Color.Warning,
            TaskState.Done => Color.Success,
            _ => Color.Default
        };
    }

    private string FormatTimeSpan(TimeSpan timeSpan)
    {
        return $"{(int)timeSpan.TotalHours}h {timeSpan.Minutes}m";
    }

    private async System.Threading.Tasks.Task OpenAddTaskDialog()
    {
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };
        var dialog = DialogService.Show<AddTaskDialog>("Add New Task", options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await LoadTasks();
        }
    }

    private async System.Threading.Tasks.Task OpenEditTaskDialog(TaskItem task)
    {
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };
        var parameters = new DialogParameters
        {
            ["Task"] = task
        };
        var dialog = DialogService.Show<EditTaskDialog>("Edit Task", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await LoadTasks();
        }
    }

    private async System.Threading.Tasks.Task MarkTaskAsDone(TaskItem task)
    {
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };
        var parameters = new DialogParameters
        {
            ["ContentText"] = $"Are you sure you want to mark task '{task.Title}' as done?",
            ["ButtonText"] = "Mark as Done",
            ["Color"] = Color.Success
        };

        var dialog = DialogService.Show<ConfirmationDialog>("Mark Task as Done", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var command = new UpdateTaskCommand
            {
                Id = task.Id,
                Title = task.Title,
                Description = task.Description,
                Status = TaskState.Done,
                EstimatedEffort = task.EstimatedEffort
            };
            await Mediator.Send(command);
            await LoadTasks();
        }
    }

    private async System.Threading.Tasks.Task DeleteTask(TaskItem task)
    {
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };
        var parameters = new DialogParameters
        {
            ["ContentText"] = $"Are you sure you want to delete task '{task.Title}'?",
            ["ButtonText"] = "Delete",
            ["Color"] = Color.Error
        };

        var dialog = DialogService.Show<ConfirmationDialog>("Delete Task", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await Mediator.Send(new DeleteTaskCommand { Id = task.Id });
            await LoadTasks();
        }
    }

    private void NavigateToTaskDetail(int taskId)
    {
        NavigationManager.NavigateTo($"/task/{taskId}");
    }

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.DisposeAsync();
        }
    }
} 